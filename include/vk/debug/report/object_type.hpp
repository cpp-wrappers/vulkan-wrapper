#pragma once

#include "../../shared/headers.hpp"

namespace vk {
	enum class debug_report_object_type {
		unknown = VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
		instance = VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
		physical_device = VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
		device = VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
		queue = VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
		semaphore = VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
		command_buffer = VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
		fence = VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
		device_memory = VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
		buffer = VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
		image = VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
		event = VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
		query_pool = VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
		buffer_view = VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
		image_view = VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
		shader_module = VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
		pipeline_cache = VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
		pipeline_layout = VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
		render_pass = VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
		pipeline = VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
		descriptor_set_layout = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
		sampler = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
		descriptor_pool = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
		descriptor_set = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
		framebuffer = VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
		command_pool = VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
		surface_khr = VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
		swapchain_khr = VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
		debug_report_callback_ext = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
		display_khr = VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
		display_mode_khr = VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
		validation_cache_ext = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
		sampler_ycbcr_conversion = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
		descriptor_update_template = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
		//cu_module_nvx = VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT,
		//cu_function_nvx = VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT,
		acceleration_structure_khr = VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
		acceleration_structure_nv = VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
		//buffer_collection_fuchsia = VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT,
		debug_report = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
		validation_cache = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
		descriptor_update_template_khr = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
		sampler_ycbcr_conversion_khr = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT
	};
}